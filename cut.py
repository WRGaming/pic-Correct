# -*- coding: utf-8 -*-
import sys

# Form implementation generated from reading ui file 'untitled1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import numpy
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from numpy import *
from copy import deepcopy
import numpy as np
import math

from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QFileDialog
import config
from config import Language


class ImageBox(QWidget):
    def __init__(self):
        super(ImageBox, self).__init__()
        self.img2_path = None
        self.img_path = None
        self.point_save_flag_set_flag = None
        self.pointPaint = None
        self.move_flag = None
        self.img = None
        self.scaled_img = None
        self.point = QPoint(0, 0)
        self.start_pos = None
        self.end_pos = None
        self.left_click = False
        self.scale = 1
        self.points = []
        self.points_top = []
        self.points_bottom = []
        self.points_left = []
        self.points_right = []
        self.points_flag_list = []
        self.points_flag = []
        self.points_layout = []
        self.points_scale = []
        self.lines = []

        self.img2 = None
        self.img2_point = QPoint(700, 200)

        for i in range(4):
            self.lines.append([0, 0])
        self.transformed = QTransform()
        self.firstStepFlag = False
        self.secondStepFlag = False
        self.point_save_flag = 0
        self.nextStep = 0
        self.setFocus()
        self.setFocusPolicy(Qt.StrongFocus)

    def init_ui(self):
        self.setWindowTitle("ImageBox")

    def set_image(self, img_path):
        """
        open image file
        :param img_path: image file path
        :return:
        """
        # img = QImageReader(img_path)
        # img.setScaledSize(QSize(self.size().width(), self.size().height()))
        # img = img.read()
        self.img = QPixmap(img_path)
        self.img_path = img_path
        self.scaled_img = self.img

    def set_image2(self, img_path):
        self.img2 = QPixmap(img_path)
        self.img2_path = img_path

    def paintEvent(self, e):
        """
        receive paint events
        :param e: QPaintEvent
        :return:
        """
        if self.scaled_img:
            painter = QPainter()
            painter.begin(self)
            painter.scale(self.scale, self.scale)
            painter.drawPixmap(self.point, self.scaled_img)
            painter.end()
        if self.img2:
            painter = QPainter()
            painter.begin(self)
            painter.setOpacity(1)
            painter.scale(1.2, 1.2)
            painter.drawPixmap(self.img2_point, self.img2)
            painter.end()
        super().paintEvent(e)
        painter = QPainter()
        if self.scaled_img is not None:
            painter.begin(self.scaled_img)
        else:
            painter.begin(self)
        painter.setPen(QPen(Qt.blue, 15, Qt.SolidLine))  # 实线画笔，蓝色
        if len(self.points_top) >= 4:
            x = np.array([int((self.points_top[0][0])),
                          int((self.points_top[1][0])),
                          int((self.points_top[2][0])),
                          int((self.points_top[3][0]))])
            y = np.array([int((self.points_top[0][1])),
                          int((self.points_top[1][1])),
                          int((self.points_top[2][1])),
                          int((self.points_top[3][1]))])
            slope, intercept = np.polyfit(x, y, 1)
            print(slope, intercept)
            width = QPixmap.width(self.scaled_img)
            if len(self.lines) < 1:
                self.lines.append([slope, intercept])
            else:
                self.lines[0] = [slope, intercept]
            if self.nextStep <= 2:
                painter.drawLine(0, int(intercept), width, int(width * slope + intercept))
            else:
                painter.drawLine(0, int(intercept), width, int(intercept))
            # painter.drawLine(self.points[0][0], self.points[0][1], self.points[1][0], self.points[1][1])
        if len(self.points_bottom) >= 4:
            x2 = np.array([int((self.points_bottom[0][0])),
                           int((self.points_bottom[1][0])),
                           int((self.points_bottom[2][0])),
                           int((self.points_bottom[3][0]))])
            y2 = np.array([int((self.points_bottom[0][1])),
                           int((self.points_bottom[1][1])),
                           int((self.points_bottom[2][1])),
                           int((self.points_bottom[3][1]))])
            slope2, intercept2 = np.polyfit(x2, y2, 1)
            print(slope2, intercept2)
            width = QPixmap.width(self.scaled_img)
            if len(self.lines) < 2:
                self.lines.append([slope2, intercept2])
            else:
                self.lines[1] = [slope2, intercept2]
            if self.nextStep <= 2:
                painter.drawLine(0, int(intercept2), width, int(width * slope2 + intercept2))
            else:
                painter.drawLine(0, int(intercept2), width, int(intercept2))
        if len(self.points_left) >= 4:
            x3 = np.array([int((self.points_left[0][0])),
                           int((self.points_left[1][0])),
                           int((self.points_left[2][0])),
                           int((self.points_left[3][0]))])
            y3 = np.array([int((self.points_left[0][1])),
                           int((self.points_left[1][1])),
                           int((self.points_left[2][1])),
                           int((self.points_left[3][1]))])
            slope3, intercept3 = np.polyfit(x3, y3, 1)
            print(slope3, intercept3)
            width = QPixmap.width(self.scaled_img)
            height = QPixmap.height(self.scaled_img)
            if len(self.lines) < 3:
                self.lines.append([slope3, intercept3])
            else:
                self.lines[2] = [slope3, intercept3]
            if self.nextStep <= 2:
                painter.drawLine(0, int(intercept3), width, int(width * slope3 + intercept3))
            else:
                painter.drawLine(int((int((self.points_left[0][0])) +
                                      int((self.points_left[1][0])) +
                                      int((self.points_left[2][0])) +
                                      int((self.points_left[3][0]))) / 4),
                                 0,
                                 int((int((self.points_left[0][0])) +
                                      int((self.points_left[1][0])) +
                                      int((self.points_left[2][0])) +
                                      int((self.points_left[3][0]))) / 4),
                                 height)
        if len(self.points_right) >= 4:
            x4 = np.array([int((self.points_right[0][0])),
                           int((self.points_right[1][0])),
                           int((self.points_right[2][0])),
                           int((self.points_right[3][0]))])
            y4 = np.array([int((self.points_right[0][1])),
                           int((self.points_right[1][1])),
                           int((self.points_right[2][1])),
                           int((self.points_right[3][1]))])
            slope4, intercept4 = np.polyfit(x4, y4, 1)
            print(slope4, intercept4)
            width = QPixmap.width(self.scaled_img)
            height = QPixmap.height(self.scaled_img)
            if len(self.lines) < 4:
                self.lines.append([slope4, intercept4])
            else:
                self.lines[3] = [slope4, intercept4]
            if self.nextStep <= 2:
                painter.drawLine(0, int(intercept4), width, int(width * slope4 + intercept4))
            else:
                painter.drawLine(int((int((self.points_right[0][0])) +
                                      int((self.points_right[1][0])) +
                                      int((self.points_right[2][0])) +
                                      int((self.points_right[3][0]))) / 4),
                                 0,
                                 int((int((self.points_right[0][0])) +
                                      int((self.points_right[1][0])) +
                                      int((self.points_right[2][0])) +
                                      int((self.points_right[3][0]))) / 4),
                                 height)
        painter.setPen(QPen(Qt.red, 10))  # 画点，红色
        for k in range(len(self.points_top)):
            painter.drawPoint(int((self.points_top[k][0])),
                              int((self.points_top[k][1])))
        for k in range(len(self.points_bottom)):
            painter.drawPoint(int((self.points_bottom[k][0])),
                              int((self.points_bottom[k][1])))
        for k in range(len(self.points_left)):
            painter.drawPoint(int((self.points_left[k][0])),
                              int((self.points_left[k][1])))
        for k in range(len(self.points_right)):
            painter.drawPoint(int((self.points_right[k][0])),
                              int((self.points_right[k][1])))
        for k in range(len(self.points_flag_list)):
            painter.drawPoint(int((self.points_flag_list[k][0])),
                              int((self.points_flag_list[k][1])))
        painter.end()

    def wheelEvent(self, event):
        angle = event.angleDelta() / 8  # 返回QPoint对象，为滚轮转过的数值，单位为1/8度
        angleY = angle.y()
        # 获取当前鼠标相对于view的位置
        if angleY > 0:
            self.scale *= 1.1
            for k in range(len(self.points_scale)):
                self.points_scale[k] *= 1.1
        else:  # 滚轮下滚
            self.scale *= 0.9
            for k in range(len(self.points_scale)):
                self.points_scale[k] *= 0.9
        self.adjustSize()
        self.update()

    def mouseMoveEvent(self, e):
        """
        mouse move events for the widget
        :param e: QMouseEvent
        :return:
        """
        if self.left_click and self.move_flag:
            self.end_pos = e.pos() - self.start_pos
            # for k in range(len(self.points)):
            #     self.points[k][0] += int((self.points[k][0] + self.point.x()) * (self.scale - self.points_scale[k]))
            #     self.points[k][1] += int((self.points[k][1] + self.point.y()) * (self.scale - self.points_scale[k]))
            self.point = self.point + self.end_pos
            self.start_pos = e.pos()
            self.repaint()
            self.repaint()

    def mousePressEvent(self, e: QtGui.QMouseEvent):
        """
        mouse press events for the widget
        :param e: QMouseEvent
        :return:
        """
        if e.buttons() == Qt.LeftButton:  # 左键点击
            if self.pointPaint:
                # if len(self.points) == 4:
                #     self.points.clear()  # 清空绝对坐标
                #     self.points_scale.clear()
                if len(self.points) == 3:
                    print(self.points)
                if self.point.x() == 0:
                    x0 = int((e.x() - self.point.x()) / self.scale)
                else:
                    x0 = int((e.x()) / self.scale - self.point.x())
                if self.point.y() == 0:
                    y0 = int((e.y() - self.point.y()) / self.scale)
                else:
                    y0 = int((e.y()) / self.scale - self.point.y())
                # x0 = int((e.x()))
                # y0 = int((e.y()))
                print(x0, y0)

                if self.point_save_flag == 0:
                    self.points_top.append([x0, y0])
                elif self.point_save_flag == 1:
                    self.points_bottom.append([x0, y0])
                elif self.point_save_flag == 2:
                    self.points_left.append([x0, y0])
                elif self.point_save_flag == 3:
                    self.points_right.append([x0, y0])
                elif self.point_save_flag == 4:
                    self.points_flag_list.append([x0, y0])
                self.points_scale.append(1)
                if self.point_save_flag_set_flag:
                    self.points_flag.append([e.globalX(), e.globalY()])
                    print(e.globalX(), e.globalY())
                self.update()  # 获取鼠标点击的点之后，通知画线
                self.repaint()
            elif self.move_flag:
                self.left_click = True
                self.start_pos = e.pos()
        elif e.buttons() == Qt.RightButton:  # 右键点击
            self.points.clear()  # 清空绝对坐标
            print("Clear selected points!")

    def mouseReleaseEvent(self, e):
        """
        mouse release events for the widget
        :param e: QMouseEvent
        :return:
        """
        if e.button() == Qt.LeftButton:
            self.left_click = False
        self.repaint()

    def getGlobalPos(self):  # 返回绝对坐标
        return self.points

    def keyPressEvent(self, ev):
        if ev.key() == Qt.Key_W:
            self.move_flag = True
        elif ev.key() == Qt.Key_D:
            self.pointPaint = True
        elif ev.key() == Qt.Key_Up:
            self.point_save_flag = 0
        elif ev.key() == Qt.Key_Down:
            self.point_save_flag = 1
        elif ev.key() == Qt.Key_Left:
            self.point_save_flag = 2
        elif ev.key() == Qt.Key_Right:
            self.point_save_flag = 3
        elif ev.key() == Qt.Key_Z:
            self.point_save_flag_set_flag = True
            self.point_save_flag = 4
        elif ev.key() == Qt.Key_P:
            if self.nextStep == 0:
                self.nextStep = 1
            if len(self.lines) >= 4 and self.nextStep == 1:
                self.firstStep()
            if self.nextStep == 2 and len(self.points_flag) == 2:
                self.secondStep()

    def keyReleaseEvent(self, a0: QKeyEvent):
        if a0.key() == Qt.Key_W:
            self.move_flag = False
        elif a0.key() == Qt.Key_D:
            self.pointPaint = False

    def angle_out_put(self, k):
        if k > 0:
            x = math.atan2(self.lines[0][0], 1)
        else:
            x = math.atan2(-self.lines[0][0], -1)
        x = x * 180 / math.pi
        if x > 90:
            return 180 - x
        elif x < -90:
            return -180 - x
        return -x

    def firstStep(self):
        list = []
        for i in range(4):
            list.append(self.angle_out_put(self.lines[i][0]))
        average1 = (list[0] + list[1]) / 2
        average2 = (list[2] + list[3]) / 2
        average = ((list[0] + list[1]) / 2 + (list[2] + list[3]) / 2) / 2
        if average < 0:
            average += 360
        self.transformed.rotate(average)
        print(average)
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        self.nextStep = 2
        self.point_save_flag_set_flag = True
        painter = QPainter()
        painter.begin(self)
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        painter.scale(self.scale, self.scale)
        painter.drawPixmap(self.point, self.scaled_img)
        painter.end()
        self.repaint()
        self.repaint()

    def secondStep(self):
        print(self.points_flag)
        length = int((self.points_flag_list[1][0] - self.points_flag_list[0][0]))
        for k in range(len(self.points_top)):
            self.points_top[k][1] += length
        for k in range(len(self.points_bottom)):
            self.points_bottom[k][1] -= length
        for k in range(len(self.points_left)):
            self.points_left[k][0] += length
        for k in range(len(self.points_right)):
            self.points_right[k][0] -= length
        self.nextStep = 3
        self.point.setX(0)
        self.point.setY(0)
        self.scale = 0.12
        painter = QPainter()
        painter.begin(self)
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        painter.scale(self.scale, self.scale)
        painter.drawPixmap(self.point, self.scaled_img)
        painter.end()
        self.repaint()
        self.repaint()

    def topShift(self):
        if len(self.points_top) >= 4:
            for i in range(len(self.points_top)):
                self.points_top[i][1] -= 10
        painter = QPainter()
        painter.begin(self)
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        painter.scale(self.scale, self.scale)
        painter.drawPixmap(self.point, self.scaled_img)
        painter.end()
        self.repaint()
        self.repaint()
        self.repaint()

    def bottomShift(self):
        if len(self.points_bottom) >= 4:
            for i in range(len(self.points_bottom)):
                self.points_bottom[i][1] += 10
        painter = QPainter()
        painter.begin(self)
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        painter.scale(self.scale, self.scale)
        painter.drawPixmap(self.point, self.scaled_img)
        painter.end()
        self.repaint()
        self.repaint()
        self.repaint()

    def leftShift(self):
        if len(self.points_left) >= 4:
            for i in range(len(self.points_left)):
                self.points_left[i][0] -= 10
        painter = QPainter()
        painter.begin(self)
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        painter.scale(self.scale, self.scale)
        painter.drawPixmap(self.point, self.scaled_img)
        painter.end()
        self.repaint()
        self.repaint()
        self.repaint()

    def rightShift(self):
        if len(self.points_right) >= 4:
            for i in range(len(self.points_right)):
                self.points_right[i][0] += 10
        painter = QPainter()
        painter.begin(self)
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.scaled_img = self.scaled_img.transformed(self.transformed)
        painter.scale(self.scale, self.scale)
        painter.drawPixmap(self.point, self.scaled_img)
        painter.end()
        self.repaint()
        self.repaint()

    def cut(self):
        if self.scaled_img is not None and self.nextStep == 3:
            rights = int((int((self.points_right[0][0])) +
                          int((self.points_right[1][0])) +
                          int((self.points_right[2][0])) +
                          int((self.points_right[3][0]))) / 4)
            lefts = int((int((self.points_left[0][0])) +
                         int((self.points_left[1][0])) +
                         int((self.points_left[2][0])) +
                         int((self.points_left[3][0]))) / 4)

            top = int(self.lines[0][1])

            height = int((self.lines[1][1] - self.lines[0][1]))

            painter = QPainter()
            painter.begin(self)
            self.img = QPixmap(self.img_path)
            self.scaled_img = self.img
            self.scaled_img = self.scaled_img.transformed(self.transformed)
            painter.scale(self.scale, self.scale)
            painter.drawPixmap(self.point, self.scaled_img)
            painter.end()
            self.points_top.clear()
            self.points_bottom.clear()
            self.points_left.clear()
            self.points_right.clear()
            self.points_flag_list.clear()
            self.repaint()
            self.repaint()

            self.scaled_img = self.scaled_img.copy(QRect(
                int(lefts),
                top,
                int((rights - lefts)),
                height))
            self.repaint()
            self.repaint()

    def save_file(self):
        if self.scaled_img is not None:
            self.scaled_img.save(self.img_path.strip(".tif") + ".png")
            image = Image.open(self.img_path.strip(".tif") + ".png")
            resized_image = image.resize((557, 557), Image.ANTIALIAS)
            resized_image.save(self.img_path.strip(".tif") + ".png")

    def rePoint(self):
        if self.point_save_flag == 0:
            self.points_top.clear()
        elif self.point_save_flag == 1:
            self.points_bottom.clear()
        elif self.point_save_flag == 2:
            self.points_left.clear()
        elif self.point_save_flag == 3:
            self.points_right.clear()
        elif self.point_save_flag == 4:
            self.points_flag_list.clear()
        self.img = QPixmap(self.img_path)
        self.scaled_img = self.img
        self.repaint()
        self.repaint()


class UI(object):
    def __init__(self):
        self.translator = QTranslator()
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox()
        self.reSetButton = QtWidgets.QPushButton()
        self.HeBox = QtWidgets.QCheckBox()
        self.svgBox = QtWidgets.QCheckBox()
        self.transparencySlider = QtWidgets.QSlider()

        self.saveButton = QtWidgets.QPushButton()
        self.cutButton = QtWidgets.QPushButton()

        self.rightRightButton = QtWidgets.QPushButton()
        self.leftRightButton = QtWidgets.QPushButton()
        self.downDownButton = QtWidgets.QPushButton()
        self.upDownButton = QtWidgets.QPushButton()
        self.rightLeftButton = QtWidgets.QPushButton()
        self.leftLeftButton = QtWidgets.QPushButton()
        self.downUpButton = QtWidgets.QPushButton()
        self.upUpButton = QtWidgets.QPushButton()
        self.rePointButton = QtWidgets.QPushButton()

        self.downBox = QtWidgets.QCheckBox()
        self.upBox = QtWidgets.QCheckBox()
        self.leftBox = QtWidgets.QCheckBox()
        self.rightBox = QtWidgets.QCheckBox()

        self.getRuler = QtWidgets.QPushButton()
        self.nextButton = QtWidgets.QPushButton()
        self.openFileButton = QtWidgets.QPushButton()

    def save(self):
        self.box.save_file()

    def cut(self):
        self.box.cut()

    def rightRightMove(self):
        self.box.rightShift()

    def rightLeftMove(self):
        pass

    def leftRightMove(self):
        pass

    def leftLeftMove(self):
        self.box.leftShift()

    def upUpMove(self):
        self.box.topShift()

    def upDownMove(self):
        pass

    def downDownMove(self):
        self.box.bottomShift()

    def downUpMove(self):
        pass

    def rePoint(self):
        self.box.rePoint()

    def downClick(self):
        self.box.point_save_flag = 1
        self.upBox.setChecked(False)
        self.downBox.setChecked(True)
        self.leftBox.setChecked(False)
        self.rightBox.setChecked(False)

    def upClick(self):
        self.box.point_save_flag = 0
        self.upBox.setChecked(True)
        self.downBox.setChecked(False)
        self.leftBox.setChecked(False)
        self.rightBox.setChecked(False)

    def leftClick(self):
        self.box.point_save_flag = 2
        self.upBox.setChecked(False)
        self.downBox.setChecked(False)
        self.leftBox.setChecked(True)
        self.rightBox.setChecked(False)

    def rightClick(self):
        self.box.point_save_flag = 3
        self.upBox.setChecked(False)
        self.downBox.setChecked(False)
        self.leftBox.setChecked(False)
        self.rightBox.setChecked(True)

    def rulerClick(self):
        self.box.point_save_flag = 4
        self.upBox.setChecked(False)
        self.downBox.setChecked(False)
        self.leftBox.setChecked(False)
        self.rightBox.setChecked(False)

    def next(self):
        if self.box.nextStep == 0:
            self.box.nextStep = 1
        if len(self.box.lines) >= 4 and self.box.nextStep == 1:
            self.box.firstStep()
        if self.box.nextStep == 2 and len(self.box.points_flag) == 2:
            self.box.secondStep()
            return
        if self.box.nextStep == 3:
            self.open_image2()

    def resetFunc(self):                       #重新设置按钮
        self.transparencySlider.setValue(80)
        self.transparencySlider.setSingleStep(1)
        self.spinSlider.setValue(0)
        self.spinSlider.setSingleStep(1)

    def HeBoxFunc(self):                       #显示he
        #self.HeBox.isChecked()    获取是否选中
        pass

    def svgBoxFunc(self):                       #显示svg
        #self.svgBox.isChecked()    获取是否选中
        pass

    def transparencyFunc(self):                 #透明度滑块
        self.label_6.setText(str(self.transparencySlider.value())+"%")
        #self.transparencySlider.value() 获取该滑块值

    def spinFunc(self):                         #旋转滑块，范围 ±180
        pass
        #self.spinSlider.value() 获取该滑块值

    def setConnected(self):
        self.reSetButton.clicked.connect(self.resetFunc)
        self.HeBox.clicked.connect(self.HeBoxFunc)
        self.svgBox.clicked.connect(self.svgBoxFunc)
        self.transparencySlider.valueChanged.connect(self.transparencyFunc)
        self.doubleSpinBox.valueChanged.connect(self.spinFunc)

        self.transparencySlider.setMaximum(100)
        self.transparencySlider.setMinimum(0)
        self.transparencySlider.setValue(80)
        self.transparencySlider.setSingleStep(1)
        self.doubleSpinBox.setMaximum(180)
        self.doubleSpinBox.setMinimum(-180)
        self.doubleSpinBox.setValue(0)
        self.doubleSpinBox.setSingleStep(0.1)
        self.doubleSpinBox.setDecimals(1)

        self.HeBox.setChecked(True)
        self.svgBox.setChecked(True)

        self.openFileButton.clicked.connect(self.open_image)

        self.rightRightButton.clicked.connect(self.rightRightMove)
        self.leftRightButton.clicked.connect(self.leftRightMove)
        self.rightLeftButton.clicked.connect(self.rightLeftMove)
        self.leftLeftButton.clicked.connect(self.leftLeftMove)
        self.upUpButton.clicked.connect(self.upUpMove)
        self.downDownButton.clicked.connect(self.downDownMove)
        self.upDownButton.clicked.connect(self.upDownMove)
        self.downUpButton.clicked.connect(self.downUpMove)

        self.rePointButton.clicked.connect(self.rePoint)
        self.rightBox.clicked.connect(self.rightClick)
        self.leftBox.clicked.connect(self.leftClick)
        self.upBox.clicked.connect(self.upClick)
        self.downBox.clicked.connect(self.downClick)
        self.getRuler.clicked.connect(self.rulerClick)
        self.nextButton.clicked.connect(self.next)
        self.cutButton.clicked.connect(self.cut)
        self.saveButton.clicked.connect(self.save)

        self.actionen.triggered.connect(self.changeToEnglish)
        self.actionalabo.triggered.connect(self.changeToArabic)
        self.actionzh.triggered.connect(self.changeToChinese)
        self.actionGerman.triggered.connect(self.changeToGerman)
        self.actionxibolai.triggered.connect(self.changeToHebrew)
        self.actionJapenese.triggered.connect(self.changeToJapanese)
        self.actionlading.triggered.connect(self.changeToLatin)
        self.actionFranch.triggered.connect(self.changeToFrench)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayout_3 = QtWidgets.QFormLayout(self.centralwidget)
        self.formLayout_3.setObjectName("formLayout_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.openFileButton = QtWidgets.QPushButton(self.centralwidget)
        self.openFileButton.setObjectName("openFileButton")
        self.verticalLayout_3.addWidget(self.openFileButton)
        spacerItem = QtWidgets.QSpacerItem(20, 18, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.verticalLayout_3.addWidget(self.label)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.leftBox = QtWidgets.QCheckBox(self.centralwidget)
        self.leftBox.setObjectName("leftBox")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.leftBox)
        self.upBox = QtWidgets.QCheckBox(self.centralwidget)
        self.upBox.setObjectName("upBox")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.upBox)
        self.downBox = QtWidgets.QCheckBox(self.centralwidget)
        self.downBox.setObjectName("downBox")
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.downBox)
        self.rePointButton = QtWidgets.QPushButton(self.centralwidget)
        self.rePointButton.setObjectName("rePointButton")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.rePointButton)
        self.rightBox = QtWidgets.QCheckBox(self.centralwidget)
        self.rightBox.setObjectName("rightBox")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.rightBox)
        self.getRuler = QtWidgets.QPushButton(self.centralwidget)
        self.getRuler.setObjectName("getRuler")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.SpanningRole, self.getRuler)
        self.verticalLayout_3.addLayout(self.formLayout)
        spacerItem1 = QtWidgets.QSpacerItem(20, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem1)
        self.formLayout_2 = QtWidgets.QFormLayout()
        self.formLayout_2.setObjectName("formLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
        self.upUpButton = QtWidgets.QPushButton(self.centralwidget)
        self.upUpButton.setObjectName("upUpButton")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.upUpButton)
        self.downUpButton = QtWidgets.QPushButton(self.centralwidget)
        self.downUpButton.setObjectName("downUpButton")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.downUpButton)
        self.leftLeftButton = QtWidgets.QPushButton(self.centralwidget)
        self.leftLeftButton.setObjectName("leftLeftButton")
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.leftLeftButton)
        self.rightLeftButton = QtWidgets.QPushButton(self.centralwidget)
        self.rightLeftButton.setObjectName("rightLeftButton")
        self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.rightLeftButton)
        self.upDownButton = QtWidgets.QPushButton(self.centralwidget)
        self.upDownButton.setObjectName("upDownButton")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.upDownButton)
        self.downDownButton = QtWidgets.QPushButton(self.centralwidget)
        self.downDownButton.setObjectName("downDownButton")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.downDownButton)
        self.leftRightButton = QtWidgets.QPushButton(self.centralwidget)
        self.leftRightButton.setObjectName("leftRightButton")
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.leftRightButton)
        self.rightRightButton = QtWidgets.QPushButton(self.centralwidget)
        self.rightRightButton.setObjectName("rightRightButton")
        self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.rightRightButton)
        self.verticalLayout_3.addLayout(self.formLayout_2)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem2)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.horizontalLayout.addWidget(self.doubleSpinBox)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.verticalLayout_4.addLayout(self.horizontalLayout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_4.addWidget(self.label_5)
        self.transparencySlider = QtWidgets.QSlider(self.centralwidget)
        self.transparencySlider.setOrientation(QtCore.Qt.Horizontal)
        self.transparencySlider.setObjectName("transparencySlider")
        self.horizontalLayout_4.addWidget(self.transparencySlider)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_4.addWidget(self.label_6)
        self.verticalLayout_4.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.svgBox = QtWidgets.QCheckBox(self.centralwidget)
        self.svgBox.setObjectName("svgBox")
        self.verticalLayout.addWidget(self.svgBox)
        self.HeBox = QtWidgets.QCheckBox(self.centralwidget)
        self.HeBox.setObjectName("HeBox")
        self.verticalLayout.addWidget(self.HeBox)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.reSetButton = QtWidgets.QPushButton(self.centralwidget)
        self.reSetButton.setObjectName("reSetButton")
        self.horizontalLayout_3.addWidget(self.reSetButton)
        self.verticalLayout_4.addLayout(self.horizontalLayout_3)
        self.verticalLayout_3.addLayout(self.verticalLayout_4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.nextButton = QtWidgets.QPushButton(self.centralwidget)
        self.nextButton.setObjectName("nextButton")
        self.verticalLayout_2.addWidget(self.nextButton)
        self.cutButton = QtWidgets.QPushButton(self.centralwidget)
        self.cutButton.setObjectName("cutButton")
        self.verticalLayout_2.addWidget(self.cutButton)
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setObjectName("saveButton")
        self.verticalLayout_2.addWidget(self.saveButton)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.formLayout_3.setLayout(0, QtWidgets.QFormLayout.LabelRole, self.verticalLayout_3)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setMouseTracking(False)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 614, 538))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.box = ImageBox()
        self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout.setObjectName("gridLayout")
        self.gridLayout.addWidget(self.box, 0, 0, 1, 1)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.scrollArea)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1647, 22))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        self.settingMenu = QtWidgets.QMenu(self.menubar)
        self.settingMenu.setObjectName("settingMenu")
        self.menu_2 = QtWidgets.QMenu(self.settingMenu)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionpng = QtWidgets.QAction(MainWindow)
        self.actionpng.setObjectName("actionpng")
        self.action_select = QtWidgets.QAction(MainWindow)
        self.action_select.setObjectName("action_select")
        self.action_svg = QtWidgets.QAction(MainWindow)
        self.action_svg.setObjectName("action_svg")
        self.action_out = QtWidgets.QAction(MainWindow)
        self.action_out.setObjectName("action_out")
        self.actionzh = QtWidgets.QAction(MainWindow)
        self.actionzh.setObjectName("actionzh")
        self.actionen = QtWidgets.QAction(MainWindow)
        self.actionen.setObjectName("actionen")
        self.actionFranch = QtWidgets.QAction(MainWindow)
        self.actionFranch.setObjectName("actionFranch")
        self.actionGerman = QtWidgets.QAction(MainWindow)
        self.actionGerman.setObjectName("actionGerman")
        self.actionJapenese = QtWidgets.QAction(MainWindow)
        self.actionJapenese.setObjectName("actionJapenese")
        self.actionalabo = QtWidgets.QAction(MainWindow)
        self.actionalabo.setObjectName("actionalabo")
        self.actionlading = QtWidgets.QAction(MainWindow)
        self.actionlading.setObjectName("actionlading")
        self.actionxibolai = QtWidgets.QAction(MainWindow)
        self.actionxibolai.setObjectName("actionxibolai")
        self.actionselect = QtWidgets.QAction(MainWindow)
        self.actionselect.setObjectName("actionselect")
        self.actioncut = QtWidgets.QAction(MainWindow)
        self.actioncut.setObjectName("actioncut")
        self.menu.addAction(self.actioncut)
        self.menu.addAction(self.actionselect)
        self.menu_2.addAction(self.actionzh)
        self.menu_2.addAction(self.actionen)
        self.menu_2.addAction(self.actionFranch)
        self.menu_2.addAction(self.actionGerman)
        self.menu_2.addAction(self.actionJapenese)
        self.menu_2.addAction(self.actionalabo)
        self.menu_2.addAction(self.actionlading)
        self.menu_2.addAction(self.actionxibolai)
        self.settingMenu.addSeparator()
        self.settingMenu.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.settingMenu.menuAction())

        self.setConnected()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.openFileButton.setText(_translate("MainWindow", "打开文件"))
        self.label.setText(_translate("MainWindow", "当前绘制点准线归属："))
        self.leftBox.setText(_translate("MainWindow", "左线"))
        self.upBox.setText(_translate("MainWindow", "上线"))
        self.downBox.setText(_translate("MainWindow", "下线"))
        self.rePointButton.setText(_translate("MainWindow", "重新绘制"))
        self.rightBox.setText(_translate("MainWindow", "右线"))
        self.getRuler.setText(_translate("MainWindow", "选择标尺"))
        self.label_2.setText(_translate("MainWindow", "准线调整："))
        self.upUpButton.setText(_translate("MainWindow", "上线上移"))
        self.downUpButton.setText(_translate("MainWindow", "下线上移"))
        self.leftLeftButton.setText(_translate("MainWindow", "左线左移"))
        self.rightLeftButton.setText(_translate("MainWindow", "右线左移"))
        self.upDownButton.setText(_translate("MainWindow", "上线下移"))
        self.downDownButton.setText(_translate("MainWindow", "下限下移"))
        self.leftRightButton.setText(_translate("MainWindow", "左线右移"))
        self.rightRightButton.setText(_translate("MainWindow", "右线右移"))
        self.label_4.setText(_translate("MainWindow", "旋转调整"))
        self.label_3.setText(_translate("MainWindow", "度"))
        self.label_5.setText(_translate("MainWindow", "透明度调整"))
        self.label_6.setText(_translate("MainWindow", "80%"))
        self.svgBox.setText(_translate("MainWindow", "svg显示"))
        self.HeBox.setText(_translate("MainWindow", "He显示"))
        self.reSetButton.setText(_translate("MainWindow", "复位"))
        self.nextButton.setText(_translate("MainWindow", "下一步"))
        self.cutButton.setText(_translate("MainWindow", "裁剪"))
        self.saveButton.setText(_translate("MainWindow", "保存处理"))
        self.menu.setTitle(_translate("MainWindow", "开始"))
        self.settingMenu.setTitle(_translate("MainWindow", "设置"))
        self.menu_2.setTitle(_translate("MainWindow", "语言"))
        self.actionpng.setText(_translate("MainWindow", "png处理"))
        self.action_select.setText(_translate("MainWindow", "选区处理"))
        self.action_svg.setText(_translate("MainWindow", "导入svg"))
        self.action_out.setText(_translate("MainWindow", "输出"))
        self.actionzh.setText(_translate("MainWindow", "中文"))
        self.actionen.setText(_translate("MainWindow", "English"))
        self.actionFranch.setText(_translate("MainWindow", "Français"))
        self.actionGerman.setText(_translate("MainWindow", "Deutsch"))
        self.actionJapenese.setText(_translate("MainWindow", "日本語"))
        self.actionalabo.setText(_translate("MainWindow", "اللغة العربية"))
        self.actionlading.setText(_translate("MainWindow", "Lingua Latīna"))
        self.actionxibolai.setText(_translate("MainWindow", "עִבְרִית"))
        self.actionselect.setText(_translate("MainWindow", "步骤二 选区"))
        self.actioncut.setText(_translate("MainWindow", "步骤一 裁剪"))

    def changeLanguage(self, lan):
        if lan == Language.Chi:
            self.changeToChinese()
        elif lan == Language.Eng:
            self.changeToEnglish()
        elif lan == Language.Fra:
            self.changeToFrench()
        elif lan == Language.Ger:
            self.changeToGerman()
        elif lan == Language.Jan:
            self.changeToJapanese()
        elif lan == Language.Alo:
            self.changeToArabic()
        elif lan == Language.Lad:
            self.changeToLatin()
        elif lan == Language.Hib:
            self.changeToHebrew()

    def changeToChinese(self):
        path = "language/cut/chn_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Chi

    def changeToEnglish(self):
        path = "language/cut/eng_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Eng

    def changeToFrench(self):
        path = "language/cut/fra_cut .qm.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Fra

    def changeToGerman(self):
        path = "language/cut/ger_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Ger

    def changeToJapanese(self):
        path = "language/cut/jan_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Jan

    def changeToArabic(self):
        path = "language/cut/alo_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Alo

    def changeToLatin(self):
        path = "language/cut/lad_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Lad

    def changeToHebrew(self):
        path = "language/cut/hib_cut.qm"
        path = config.resource_path(path)
        self.translator.load(path)
        QApplication.instance().installTranslator(self.translator)
        self.retranslateUi(QtWidgets.QMainWindow())
        config.now_Lan = Language.Hib

    # def setupUi(self, MainWindow):
    #     MainWindow.setObjectName("MainWindow")
    #     MainWindow.resize(800, 600)
    #     self.centralwidget = QtWidgets.QWidget(MainWindow)
    #     self.centralwidget.setObjectName("centralwidget")
    #     self.formLayout_3 = QtWidgets.QFormLayout(self.centralwidget)
    #     self.formLayout_3.setObjectName("formLayout_3")
    #     self.verticalLayout_3 = QtWidgets.QVBoxLayout()
    #     self.verticalLayout_3.setObjectName("verticalLayout_3")
    #     self.openFileButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.openFileButton.setObjectName("openFileButton")
    #     self.verticalLayout_3.addWidget(self.openFileButton)
    #     spacerItem = QtWidgets.QSpacerItem(20, 18, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
    #     self.verticalLayout_3.addItem(spacerItem)
    #     self.label = QtWidgets.QLabel(self.centralwidget)
    #     self.label.setObjectName("label")
    #     self.verticalLayout_3.addWidget(self.label)
    #     self.formLayout = QtWidgets.QFormLayout()
    #     self.formLayout.setObjectName("formLayout")
    #     self.leftBox = QtWidgets.QCheckBox(self.centralwidget)
    #     self.leftBox.setObjectName("leftBox")
    #     self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.leftBox)
    #     self.upBox = QtWidgets.QCheckBox(self.centralwidget)
    #     self.upBox.setObjectName("upBox")
    #     self.formLayout.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.upBox)
    #     self.downBox = QtWidgets.QCheckBox(self.centralwidget)
    #     self.downBox.setObjectName("downBox")
    #     self.formLayout.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.downBox)
    #     self.rePointButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.rePointButton.setObjectName("rePointButton")
    #     self.formLayout.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.rePointButton)
    #     self.rightBox = QtWidgets.QCheckBox(self.centralwidget)
    #     self.rightBox.setObjectName("rightBox")
    #     self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.rightBox)
    #     self.getRuler = QtWidgets.QPushButton(self.centralwidget)
    #     self.getRuler.setObjectName("getRuler")
    #     self.formLayout.setWidget(3, QtWidgets.QFormLayout.SpanningRole, self.getRuler)
    #     self.verticalLayout_3.addLayout(self.formLayout)
    #     spacerItem1 = QtWidgets.QSpacerItem(20, 58, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
    #     self.verticalLayout_3.addItem(spacerItem1)
    #     self.formLayout_2 = QtWidgets.QFormLayout()
    #     self.formLayout_2.setObjectName("formLayout_2")
    #     self.label_2 = QtWidgets.QLabel(self.centralwidget)
    #     self.label_2.setObjectName("label_2")
    #     self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_2)
    #     self.upUpButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.upUpButton.setObjectName("upUpButton")
    #     self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.upUpButton)
    #     self.downUpButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.downUpButton.setObjectName("downUpButton")
    #     self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.downUpButton)
    #     self.leftLeftButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.leftLeftButton.setObjectName("leftLeftButton")
    #     self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.leftLeftButton)
    #     self.rightLeftButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.rightLeftButton.setObjectName("rightLeftButton")
    #     self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.rightLeftButton)
    #     self.upDownButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.upDownButton.setObjectName("upDownButton")
    #     self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.upDownButton)
    #     self.downDownButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.downDownButton.setObjectName("downDownButton")
    #     self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.downDownButton)
    #     self.leftRightButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.leftRightButton.setObjectName("leftRightButton")
    #     self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.leftRightButton)
    #     self.rightRightButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.rightRightButton.setObjectName("rightRightButton")
    #     self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.rightRightButton)
    #     self.verticalLayout_3.addLayout(self.formLayout_2)
    #     spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
    #     self.verticalLayout_3.addItem(spacerItem2)
    #     self.verticalLayout_4 = QtWidgets.QVBoxLayout()
    #     self.verticalLayout_4.setObjectName("verticalLayout_4")
    #     self.horizontalLayout = QtWidgets.QHBoxLayout()
    #     self.horizontalLayout.setObjectName("horizontalLayout")
    #     self.label_4 = QtWidgets.QLabel(self.centralwidget)
    #     self.label_4.setObjectName("label_4")
    #     self.horizontalLayout.addWidget(self.label_4)
    #     self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
    #     self.doubleSpinBox.setObjectName("doubleSpinBox")
    #     self.horizontalLayout.addWidget(self.doubleSpinBox)
    #     self.label_3 = QtWidgets.QLabel(self.centralwidget)
    #     self.label_3.setObjectName("label_3")
    #     self.horizontalLayout.addWidget(self.label_3)
    #     self.verticalLayout_4.addLayout(self.horizontalLayout)
    #     self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
    #     self.horizontalLayout_4.setObjectName("horizontalLayout_4")
    #     self.label_5 = QtWidgets.QLabel(self.centralwidget)
    #     self.label_5.setObjectName("label_5")
    #     self.horizontalLayout_4.addWidget(self.label_5)
    #     self.transparencySlider = QtWidgets.QSlider(self.centralwidget)
    #     self.transparencySlider.setOrientation(QtCore.Qt.Horizontal)
    #     self.transparencySlider.setObjectName("transparencySlider")
    #     self.horizontalLayout_4.addWidget(self.transparencySlider)
    #     self.label_6 = QtWidgets.QLabel(self.centralwidget)
    #     self.label_6.setObjectName("label_6")
    #     self.horizontalLayout_4.addWidget(self.label_6)
    #     self.verticalLayout_4.addLayout(self.horizontalLayout_4)
    #     self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
    #     self.horizontalLayout_3.setObjectName("horizontalLayout_3")
    #     self.verticalLayout = QtWidgets.QVBoxLayout()
    #     self.verticalLayout.setObjectName("verticalLayout")
    #     self.svgBox = QtWidgets.QCheckBox(self.centralwidget)
    #     self.svgBox.setObjectName("svgBox")
    #     self.verticalLayout.addWidget(self.svgBox)
    #     self.HeBox = QtWidgets.QCheckBox(self.centralwidget)
    #     self.HeBox.setObjectName("HeBox")
    #     self.verticalLayout.addWidget(self.HeBox)
    #     self.horizontalLayout_3.addLayout(self.verticalLayout)
    #     self.reSetButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.reSetButton.setObjectName("reSetButton")
    #     self.horizontalLayout_3.addWidget(self.reSetButton)
    #     self.verticalLayout_4.addLayout(self.horizontalLayout_3)
    #     self.verticalLayout_3.addLayout(self.verticalLayout_4)
    #     spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
    #     self.verticalLayout_3.addItem(spacerItem3)
    #     self.verticalLayout_2 = QtWidgets.QVBoxLayout()
    #     self.verticalLayout_2.setObjectName("verticalLayout_2")
    #     self.nextButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.nextButton.setObjectName("nextButton")
    #     self.verticalLayout_2.addWidget(self.nextButton)
    #     self.cutButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.cutButton.setObjectName("cutButton")
    #     self.verticalLayout_2.addWidget(self.cutButton)
    #     self.saveButton = QtWidgets.QPushButton(self.centralwidget)
    #     self.saveButton.setObjectName("saveButton")
    #     self.verticalLayout_2.addWidget(self.saveButton)
    #     self.verticalLayout_3.addLayout(self.verticalLayout_2)
    #     self.formLayout_3.setLayout(0, QtWidgets.QFormLayout.LabelRole, self.verticalLayout_3)
    #
    #     self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
    #     self.scrollArea.setMouseTracking(False)
    #     self.scrollArea.setWidgetResizable(True)
    #     self.scrollArea.setObjectName("scrollArea")
    #     self.scrollAreaWidgetContents = QtWidgets.QWidget()
    #     self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 614, 538))
    #     self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
    #     self.scrollArea.setWidget(self.scrollAreaWidgetContents)
    #     self.box = ImageBox()
    #     self.gridLayout = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
    #     self.gridLayout.setObjectName("gridLayout")
    #     self.gridLayout.addWidget(self.box, 0, 0, 1, 1)
    #     self.scrollArea.setWidget(self.scrollAreaWidgetContents)
    #     self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.scrollArea)
    #
    #     MainWindow.setCentralWidget(self.centralwidget)
    #     self.menubar = QtWidgets.QMenuBar(MainWindow)
    #     self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
    #     self.menubar.setObjectName("menubar")
    #     MainWindow.setMenuBar(self.menubar)
    #     self.statusbar = QtWidgets.QStatusBar(MainWindow)
    #     self.statusbar.setObjectName("statusbar")
    #     MainWindow.setStatusBar(self.statusbar)
    #
    #     self.setConnected()
    #     self.retranslateUi(MainWindow)
    #     QtCore.QMetaObject.connectSlotsByName(MainWindow)
    #
    #     self.retranslateUi(MainWindow)
    #     QtCore.QMetaObject.connectSlotsByName(MainWindow)
    #
    # def retranslateUi(self, MainWindow):
    #     _translate = QtCore.QCoreApplication.translate
    #     MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
    #     self.openFileButton.setText(_translate("MainWindow", "打开文件"))
    #     self.label.setText(_translate("MainWindow", "当前绘制点准线归属："))
    #     self.leftBox.setText(_translate("MainWindow", "左线"))
    #     self.upBox.setText(_translate("MainWindow", "上线"))
    #     self.downBox.setText(_translate("MainWindow", "下线"))
    #     self.rePointButton.setText(_translate("MainWindow", "重新绘制"))
    #     self.rightBox.setText(_translate("MainWindow", "右线"))
    #     self.getRuler.setText(_translate("MainWindow", "选择标尺"))
    #     self.label_2.setText(_translate("MainWindow", "准线调整："))
    #     self.upUpButton.setText(_translate("MainWindow", "上线上移"))
    #     self.downUpButton.setText(_translate("MainWindow", "下线上移"))
    #     self.leftLeftButton.setText(_translate("MainWindow", "左线左移"))
    #     self.rightLeftButton.setText(_translate("MainWindow", "右线左移"))
    #     self.upDownButton.setText(_translate("MainWindow", "上线下移"))
    #     self.downDownButton.setText(_translate("MainWindow", "下限下移"))
    #     self.leftRightButton.setText(_translate("MainWindow", "左线右移"))
    #     self.rightRightButton.setText(_translate("MainWindow", "右线右移"))
    #     self.label_4.setText(_translate("MainWindow", "旋转调整"))
    #     self.label_3.setText(_translate("MainWindow", "度"))
    #     self.label_5.setText(_translate("MainWindow", "透明度调整"))
    #     self.label_6.setText(_translate("MainWindow", "80%"))
    #     self.svgBox.setText(_translate("MainWindow", "svg显示"))
    #     self.HeBox.setText(_translate("MainWindow", "He显示"))
    #     self.reSetButton.setText(_translate("MainWindow", "复位"))
    #     self.nextButton.setText(_translate("MainWindow", "下一步"))
    #     self.cutButton.setText(_translate("MainWindow", "裁剪"))
    #     self.saveButton.setText(_translate("MainWindow", "保存处理"))


    def open_image(self):
        """
        select image file and open it 
        :return:
        """
        # img_name, _ = QFileDialog.getOpenFileName(self, "打开图片", "", "All Files(*);;*.jpg;;*.png")
        img_name, _ = QFileDialog.getOpenFileName(None, "Open Image File", "", "")
        img = QPixmap(img_name)
        print(img.width(), "+", img.height())
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, img.width(), img.height()))
        if img_name != "":
            self.box.set_image(img_name)

    def open_image2(self):
        """
        select image file and open it
        :return:
        """
        # img_name, _ = QFileDialog.getOpenFileName(self, "打开图片", "", "All Files(*);;*.jpg;;*.png")
        img_name, _ = QFileDialog.getOpenFileName(None, "Open Image File", "", "")
        img = QPixmap(img_name)
        print(img.width(), "+", img.height())
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, img.width(), img.height()))
        self.box.set_image2(img_name)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = UI()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
